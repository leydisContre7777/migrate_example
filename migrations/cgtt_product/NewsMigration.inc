<?php

class NewsMigration extends CgttBaseMigration {


	public function __construct($arguments) {
		parent::__construct($arguments);
		$query = Database::getConnection($this->cgttConection, $this->cgttConectionKey)
			->select('noticia')
			->fields('noticia', array('idnoticia',
				'titulo',
				'fechainicio',
				'fechafin',
				'entradilla',
				'contenido'));

		$query->join('tematica_noticia', 't', 't.idtematica_noticia = noticia.idtematica');

		$query->fields('t', array('valor_es'
		));



		$this->source = new MigrateSourceSQL($query, array(), NULL, array(map_joinable => FALSE));
		$this->destination = new MigrateDestinationNode('noticia');

		$this->map = new MigrateSQLMap($this->machineName,
			array(
				'idnoticia' => array('type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'description' => t('Source ID'),
				)
			),
			MigrateDestinationNode::getKeySchema()
		);

		$this->addFieldMapping('title', 'titulo');
		$this->addFieldMapping('body', 'contenido');
		$this->addFieldMapping('field_fecha_publicaci_n', 'fechainicio');
		$this->addFieldMapping('field_tem_tica', 'valor_es');
		$this->addFieldMapping('status')->defaultValue(1);
		$this->addFieldMapping('language')->defaultValue('es');


		$this->addUnmigratedDestinations(array(
			'body:format',
			'changed',
			'comment',
			'is_new',
			'log',
			'promote',
			'revision',
			'revision_uid',
			'tnid',
			'totalcount',
			'daycount',
			'timestamp',
			'path',
			'translate',
			'sticky',
			'uid',
			'created'
		));

	}

	public function prepareRow($row) {

		if ($row->requerimientos) {
			$row->requirements = explode(",", $row->requerimientos);

			$requirements_voc = array();
			foreach ($row->requirements as $value) {
				$term_array = taxonomy_get_term_by_name($value);
				$term = reset($term_array);
				array_push($requirements_voc, $term->tid);
			}

			$row->requirements = $requirements_voc;


		}


		return parent::prepareRow($row); // TODO: Change the autogenerated stub
	}


	public function complete($entity, stdClass $row) {
		$transition = new WorkflowTransition();
		$transition->setValues('node', $entity, '', $entity->workflow, 39, 1, REQUEST_TIME, t('Updating workflow state'));
		$transition->execute(TRUE);
	}


}